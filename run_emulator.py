#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–¥—ã
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
"""

import sys
import subprocess
import os

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    missing_deps = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ tkinter
    try:
        import tkinter
        print("‚úÖ tkinter - OK")
    except ImportError:
        missing_deps.append("python3-tk")
        print("‚ùå tkinter - –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requests
    try:
        import requests
        print("‚úÖ requests - OK")
    except ImportError:
        missing_deps.append("python3-requests")
        print("‚ùå requests - –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    std_libs = ['hashlib', 'threading', 'time', 'random', 'socket', 'json', 'datetime', 'queue', 'uuid']
    for lib in std_libs:
        try:
            __import__(lib)
            print(f"‚úÖ {lib} - OK")
        except ImportError:
            print(f"‚ùå {lib} - –ù–ï –ù–ê–ô–î–ï–ù")
            return False
    
    if missing_deps:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {', '.join(missing_deps)}")
        try:
            subprocess.run(['sudo', 'apt', 'update'], check=True, capture_output=True)
            subprocess.run(['sudo', 'apt', 'install', '-y'] + missing_deps, check=True, capture_output=True)
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
            print(f"sudo apt install -y {' '.join(missing_deps)}")
            return False
    
    return True

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    print("\nüéØ –≠–ú–£–õ–Ø–¢–û–† –ö–†–ò–ü–¢–û–ù–û–î–´")
    print("=" * 40)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. üñ•Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å GUI —ç–º—É–ª—è—Ç–æ—Ä")
    print("2. üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
    print("3. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    print("4. üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print("5. üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 40)

def run_gui_emulator():
    """–ó–∞–ø—É—Å–∫ GUI —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ GUI —ç–º—É–ª—è—Ç–æ—Ä–∞...")
    try:
        from crypto_node_emulator import CryptoNodeEmulator
        emulator = CryptoNodeEmulator()
        emulator.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: python3 crypto_node_emulator.py")

def run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üìä –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    try:
        subprocess.run([sys.executable, 'demo.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    try:
        subprocess.run([sys.executable, 'test_all.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")

def show_documentation():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    print("üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø")
    print("=" * 40)
    
    docs = [
        ("README.md", "–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ("USAGE_GUIDE.md", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ("PROJECT_SUMMARY.md", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"),
        ("requirements.txt", "–°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    ]
    
    for filename, description in docs:
        if os.path.exists(filename):
            print(f"üìÑ {filename} - {description}")
        else:
            print(f"‚ùå {filename} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("cat README.md")
    print("cat USAGE_GUIDE.md")
    print("cat PROJECT_SUMMARY.md")

def run_advanced_simulator():
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
    print("üîß –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...")
    try:
        subprocess.run([sys.executable, 'advanced_node_features.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ú–£–õ–Ø–¢–û–† –ö–†–ò–ü–¢–û–ù–û–î–´!")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print("sudo apt install -y python3-tk python3-requests")
        return
    
    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
    while True:
        show_menu()
        
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-5): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                run_gui_emulator()
            elif choice == '2':
                run_demo()
            elif choice == '3':
                run_tests()
            elif choice == '4':
                show_documentation()
            elif choice == '5':
                run_advanced_simulator()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()