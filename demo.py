#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–¥—ã
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import time
import random
from crypto_node_emulator import CryptoNodeEmulator, BlockchainNode, Transaction, Block
from advanced_node_features import AdvancedBlockchainNode, NodeType, NetworkProtocol, NetworkSimulator

def demo_basic_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–¥—ã")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞
    emulator = CryptoNodeEmulator()
    
    print("‚úÖ –≠–º—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∑–ª–æ–≤:")
    
    for i, node in enumerate(emulator.nodes):
        info = node.get_info()
        print(f"  –£–∑–µ–ª {i+1}: {info['node_id']} - {info['status']} "
              f"(–í—ã—Å–æ—Ç–∞: {info['block_height']}, –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {info['sync_status']})")
    
    print("\nüéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–∑–µ–ª")
    print("  2. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    print("  3. –ú–∞–π–Ω–∏—Ç—å –±–ª–æ–∫–∏")
    print("  4. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–∞—Ö")
    print("  5. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    
    return emulator

def demo_advanced_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Å–µ—Ç–∏
    network = NetworkSimulator()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
    nodes = [
        AdvancedBlockchainNode("FULL_BTC_001", NodeType.FULL, 100, 100, NetworkProtocol.BITCOIN),
        AdvancedBlockchainNode("LIGHT_BTC_001", NodeType.LIGHT, 200, 100, NetworkProtocol.BITCOIN),
        AdvancedBlockchainNode("MINING_BTC_001", NodeType.MINING, 300, 100, NetworkProtocol.BITCOIN),
        AdvancedBlockchainNode("FULL_ETH_001", NodeType.FULL, 400, 100, NetworkProtocol.ETHEREUM),
        AdvancedBlockchainNode("VALIDATOR_001", NodeType.VALIDATOR, 500, 100, NetworkProtocol.CUSTOM),
    ]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ —Å–µ—Ç—å
    for node in nodes:
        network.add_node(node)
    
    print(f"üì° –°–æ–∑–¥–∞–Ω–æ {len(nodes)} —É–∑–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤:")
    for node in nodes:
        print(f"  - {node.node_id} ({node.node_type.value}, {node.protocol.value})")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ç–∏
    print("\nüåê –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    for i in range(5):
        network.simulate_network_activity()
        stats = network.get_network_statistics()
        
        print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}:")
        print(f"    –£–∑–ª–æ–≤ –æ–Ω–ª–∞–π–Ω: {stats['online_nodes']}/{stats['total_nodes']}")
        print(f"    –ù–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: {stats['network_load_percent']}%")
        print(f"    –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {stats['average_latency']}–º—Å")
        print(f"    –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ç–∏: {stats['network_health']}")
        
        # –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–∑–ª–∞—Ö
        for node in nodes:
            info = node.get_detailed_info()
            print(f"    {info['node_id']}: CPU {info['cpu_usage']}%, "
                  f"–ü–∞–º—è—Ç—å {info['memory_usage_mb']}–ú–ë, "
                  f"–õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å {info['latency_ms']}–º—Å")
        
        time.sleep(1)
    
    return network

def demo_transaction_creation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("\nüí∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    from advanced_node_features import TransactionPool
    
    pool = TransactionPool()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transaction_types = [
        ("–ü–µ—Ä–µ–≤–æ–¥", 0.001, 0.0001),
        ("–ü–æ–∫—É–ø–∫–∞", 0.05, 0.001),
        ("–ü—Ä–æ–¥–∞–∂–∞", 0.1, 0.002),
        ("–ú–∏–∫—Ä–æ—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", 0.0001, 0.00005),
        ("–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞", 1.0, 0.01),
    ]
    
    for tx_type, amount, fee in transaction_types:
        tx_id = f"tx_{random.randint(10000, 99999)}"
        from_addr = f"addr_{random.randint(1000, 9999)}"
        to_addr = f"addr_{random.randint(1000, 9999)}"
        
        tx = Transaction(tx_id, from_addr, to_addr, amount, fee)
        pool.add_transaction(tx)
        
        print(f"  –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_type}")
        print(f"    ID: {tx_id}")
        print(f"    –û—Ç: {from_addr} ‚Üí –ö: {to_addr}")
        print(f"    –°—É–º–º–∞: {amount} BTC, –ö–æ–º–∏—Å—Å–∏—è: {fee} BTC")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞
    stats = pool.get_pool_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transaction_count']}")
    print(f"  –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: {stats['total_fees']} BTC")
    print(f"  –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: {stats['average_fee']} BTC")
    print(f"  –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—É–ª–∞: {stats['pool_utilization']}%")
    
    return pool

def demo_mining_simulation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞"""
    print("\n‚õèÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞")
    print("=" * 50)
    
    from advanced_node_features import MiningSimulator
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞
    miner = MiningSimulator(difficulty=1000000)
    
    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞:")
    print(f"  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {miner.difficulty}")
    print(f"  –¶–µ–ª—å —Ö–µ—à–∞: {miner.target_hash}")
    print(f"  –•–µ—à—Ä–µ–π—Ç: {miner.mining_power:.1f} MH/s")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–æ–≤
    for i in range(3):
        print(f"\n  –ú–∞–π–Ω–∏–Ω–≥ –±–ª–æ–∫–∞ {i+1}:")
        
        block_data = f"block_{i+1}_data_{random.randint(1000, 9999)}"
        result = miner.mine_block(block_data)
        
        if result:
            print(f"    ‚úÖ –ë–ª–æ–∫ –Ω–∞–π–¥–µ–Ω!")
            print(f"    –•–µ—à: {result['hash'][:16]}...")
            print(f"    Nonce: {result['nonce']}")
            print(f"    –í—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞: {result['mining_time']:.2f}—Å")
            print(f"    –•–µ—à—Ä–µ–π—Ç: {result['hashrate']:.1f} MH/s")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            miner.adjust_difficulty(result['mining_time'])
            print(f"    –ù–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {miner.difficulty}")
        else:
            print(f"    ‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫)")
    
    return miner

def demo_network_visualization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏"""
    print("\nüé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏")
    print("=" * 50)
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å–µ—Ç–∏:")
    print("  - –£–∑–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –∫—Ä—É–≥–∏")
    print("  - –°–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –∫–∞–∫ –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏")
    print("  - –¶–≤–µ—Ç–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å —É–∑–ª–æ–≤:")
    print("    üü¢ –ó–µ–ª–µ–Ω—ã–π - –ª–æ–∫–∞–ª—å–Ω—ã–π —É–∑–µ–ª")
    print("    üîµ –°–∏–Ω–∏–π - —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã")
    print("    üî¥ –ö—Ä–∞—Å–Ω—ã–π - –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–∑–ª—ã")
    print("  - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö")
    print("  - –ö–ª–∏–∫ –ø–æ —É–∑–ª—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    
    print("\nüñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  - –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —É–∑–ª—ã")
    print("  - –ö–ª–∏–∫ –ø–æ —É–∑–ª—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    print("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
    print("  - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–ú–£–õ–Ø–¢–û–†–ê –ö–†–ò–ü–¢–û–ù–û–î–´")
    print("=" * 60)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        emulator = demo_basic_features()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        network = demo_advanced_features()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        pool = demo_transaction_creation()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
        miner = demo_mining_simulation()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        demo_network_visualization()
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéÆ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python crypto_node_emulator.py")
        
        print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   - –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: python advanced_node_features.py")
        print("   - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: README.md")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    main()