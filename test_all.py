#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–¥—ã
"""

import sys
import time
import traceback

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import tkinter as tk
        print("  ‚úÖ tkinter - OK")
    except ImportError as e:
        print(f"  ‚ùå tkinter - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        import requests
        print("  ‚úÖ requests - OK")
    except ImportError as e:
        print(f"  ‚ùå requests - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        import hashlib
        print("  ‚úÖ hashlib - OK")
    except ImportError as e:
        print(f"  ‚ùå hashlib - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        import threading
        print("  ‚úÖ threading - OK")
    except ImportError as e:
        print(f"  ‚ùå threading - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

def test_basic_classes():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")
    
    try:
        from crypto_node_emulator import BlockchainNode, Transaction, Block
        
        # –¢–µ—Å—Ç BlockchainNode
        node = BlockchainNode("TEST_NODE", 100, 100)
        assert node.node_id == "TEST_NODE"
        assert node.status == "online"
        print("  ‚úÖ BlockchainNode - OK")
        
        # –¢–µ—Å—Ç Transaction
        tx = Transaction("tx_test", "addr1", "addr2", 0.001, 0.0001)
        assert tx.tx_id == "tx_test"
        assert tx.amount == 0.001
        print("  ‚úÖ Transaction - OK")
        
        # –¢–µ—Å—Ç Block
        block = Block("hash_test", 1000, "prev_hash", [], time.time())
        assert block.block_hash == "hash_test"
        assert block.height == 1000
        print("  ‚úÖ Block - OK")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö: {e}")
        traceback.print_exc()
        return False

def test_advanced_classes():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")
    
    try:
        from advanced_node_features import (
            AdvancedBlockchainNode, NodeType, NetworkProtocol,
            NetworkSimulator, TransactionPool, MiningSimulator
        )
        
        # –¢–µ—Å—Ç AdvancedBlockchainNode
        node = AdvancedBlockchainNode("ADV_NODE", NodeType.FULL, 100, 100)
        assert node.node_type == NodeType.FULL
        assert node.protocol == NetworkProtocol.BITCOIN
        print("  ‚úÖ AdvancedBlockchainNode - OK")
        
        # –¢–µ—Å—Ç NetworkSimulator
        network = NetworkSimulator()
        network.add_node(node)
        assert len(network.nodes) == 1
        print("  ‚úÖ NetworkSimulator - OK")
        
        # –¢–µ—Å—Ç TransactionPool
        pool = TransactionPool()
        assert pool.max_pool_size == 10000
        print("  ‚úÖ TransactionPool - OK")
        
        # –¢–µ—Å—Ç MiningSimulator
        miner = MiningSimulator()
        assert miner.difficulty == 1000000
        print("  ‚úÖ MiningSimulator - OK")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö: {e}")
        traceback.print_exc()
        return False

def test_network_connection():
    """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    
    try:
        from crypto_node_emulator import NetworkConnection
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        internet_status = NetworkConnection.check_internet()
        print(f"  üì° –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if internet_status else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        
        # –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        api_results = NetworkConnection.check_api_endpoints()
        print(f"  üîó –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(api_results)}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ç–µ–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        traceback.print_exc()
        return False

def test_crypto_functions():
    """–¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        import hashlib
        import uuid
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–µ–π
        test_data = "test_blockchain_data"
        hash_result = hashlib.sha256(test_data.encode()).hexdigest()
        assert len(hash_result) == 64
        print("  ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–µ–π - OK")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID
        test_uuid = str(uuid.uuid4())
        assert len(test_uuid) == 36
        print("  ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID - OK")
        
        # –¢–µ—Å—Ç –º–∞–π–Ω–∏–Ω–≥–∞
        from advanced_node_features import MiningSimulator
        miner = MiningSimulator(difficulty=1000)
        result = miner.mine_block("test_block_data")
        if result:
            print("  ‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –±–ª–æ–∫–æ–≤ - OK")
        else:
            print("  ‚ö†Ô∏è –ú–∞–π–Ω–∏–Ω–≥ –±–ª–æ–∫–æ–≤ - –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
        traceback.print_exc()
        return False

def test_gui_components():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ GUI"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ GUI...")
    
    try:
        import tkinter as tk
        from tkinter import ttk
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        root = tk.Tk()
        root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
        frame = ttk.Frame(root)
        label = ttk.Label(frame, text="Test")
        button = ttk.Button(frame, text="Test")
        progress = ttk.Progressbar(frame)
        
        assert frame is not None
        assert label is not None
        assert button is not None
        assert progress is not None
        
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ - OK")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
        root.destroy()
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {e}")
        traceback.print_exc()
        return False

def test_demo_functions():
    """–¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ demo.py
        import demo
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert hasattr(demo, 'demo_basic_features')
        assert hasattr(demo, 'demo_advanced_features')
        assert hasattr(demo, 'demo_transaction_creation')
        assert hasattr(demo, 'demo_mining_simulation')
        
        print("  ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - OK")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
        traceback.print_exc()
        return False

def run_performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        from advanced_node_features import NetworkSimulator, AdvancedBlockchainNode, NodeType
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É–∑–ª–æ–≤
        network = NetworkSimulator()
        start_time = time.time()
        
        for i in range(10):
            node = AdvancedBlockchainNode(f"PERF_NODE_{i}", NodeType.FULL, i*50, i*50)
            network.add_node(node)
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ç–∏
        for _ in range(5):
            network.simulate_network_activity()
        
        end_time = time.time()
        performance_time = end_time - start_time
        
        print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {performance_time:.2f}—Å")
        print(f"  üìä –£–∑–ª–æ–≤ –≤ —Å–µ—Ç–∏: {len(network.nodes)}")
        
        if performance_time < 1.0:
            print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –û—Ç–ª–∏—á–Ω–∞—è")
        elif performance_time < 2.0:
            print("  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –•–æ—Ä–æ—à–∞—è")
        else:
            print("  ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ú–µ–¥–ª–µ–Ω–Ω–∞—è")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ú–£–õ–Ø–¢–û–†–ê –ö–†–ò–ü–¢–û–ù–û–î–´")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã", test_basic_classes),
        ("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã", test_advanced_classes),
        ("–°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", test_network_connection),
        ("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_crypto_functions),
        ("GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_gui_components),
        ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_demo_functions),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", run_performance_test),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"  ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 crypto_node_emulator.py")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)